#!/usr/bin/ruby

####################################################################################
#
# This script parses ActiveRecord schema.rb files into markdown tables to
# document your database structure.
#
# It uses rails-erd gem to generate uml diagrams of the database.
#
# The table of contents is generated by the gen-toc script then inserted
# into the markdown file.
#
####################################################################################

require "net/http"
require "uri"

def remove_unwanted_characters(param)
  param.gsub(',','').gsub('"','')
end

def to_human_uppercase(param)
  param = param.split(' ')[1]
  parts = remove_unwanted_characters(param).gsub('_',' ').split(' ')
  uppercase_parts = Array.new
  parts.each do |part|
    uppercase_parts.push part.capitalize
  end
  [remove_unwanted_characters(param), uppercase_parts.join(' ')]
end

def attribute_parts(params)
  name = nil
  value = nil
  default = '~'
  allow_null = '~'
  comment = ''

  parts = params.split(' ')
  name = remove_unwanted_characters(parts[1])
  value = parts.first.gsub('t.','')

  if params.include? 'default: '
    index = parts.index('default:') + 1
    default = "`#{parts[index].gsub(',','').strip}`"
  end

  if params.include? 'null: '
    index = parts.index('null:') + 1
    allow_null = "`#{parts[index].gsub(',','').strip}`"
  end

  if params.include? 'comment: '
    comment = " #{params.split('comment: ').last.gsub('"','').strip}"
  end

  {
    name: name,
    value: value,
    default: default,
    allow_null: allow_null,
    comment: comment
  }
end

def belongs_to_key(table_name, params)
  name = nil
  value = nil
  default = '~'
  allow_null = '~'
  comment = ''

  parts = params.split(' ')
  name = remove_unwanted_characters(parts[1])
  model = ActiveRecord::Base.descendants.detect{|model| model.table_name == table_name if model.respond_to?(:table_name)}
  result = nil
  if model
    assoc = model.reflect_on_all_associations(:belongs_to).detect{|assoc| assoc.foreign_key == name}

    if assoc
      assoc_with = "with table #{assoc.table_name}" rescue "with class #{assoc.class}" 
      result = {
        name: name,
        value: value,
        default: default,
        allow_null: allow_null,
        comment: "foreign key belongs to association #{assoc_with}"
      }
    end
  end
  result
end

def has_many_associations(table_name)
  model = ActiveRecord::Base.descendants.detect{|model| model.table_name == table_name}
  if model
    assocs = model.reflect_on_all_associations(:has_many)
    assocs.each do |assoc|
      @file.puts "| #{assoc.name} | ~ | ~ | ~ | has many association with table #{assoc.table_name}#{ assoc.options.key?(:as) ? " polymorphic" : "" }"
    end 
  end
end

def generate_images
  system "rake erd warn=false filetype='png' notation=bachman filename='erd_simple'"
  system "rake erd warn=false filetype='png' notation=bachman filename='erd_complex' polymorphism=true"
  system "mkdir -p docs/images; mv erd_simple.png erd_complex.png docs/images"
end

def generate_tables
  table_name = ""
  File.open( 'db/schema.rb' ).each do |line|
    line = line.strip()
    unless line.start_with? '#'
      if line.include? 'create_table'
        # Add has many associations for preceeding table
        has_many_associations(table_name) unless table_name == ""
        # Next table
        table_name, table_name_show = to_human_uppercase(line)
        @file.puts ""
        @file.puts "### #{table_name_show}"
        @file.puts ""
        @file.puts "| Name               | Value             | Default | Allow Null? | Description |"
        @file.puts "| ------------------ | ----------------- | ------- | ----------- | ----------- |"
      elsif line.start_with? 't.'
        unless line.include? 't.index'
          parts = belongs_to_key(table_name, line) || attribute_parts(line)
          @file.puts "| #{parts[:name]} | #{parts[:value]} | #{parts[:default]} | #{parts[:allow_null]} |#{parts[:comment]}"
        end
      end
    end
  end
end

def generate_header
  @file.puts "# Database Schema"
  @file.puts "> This is a complete guide of the database structure"
  @file.puts ""
  @file.puts "<!--ts-->"
  @file.puts "<!--te-->"
  @file.puts ""
  @file.puts "## Database Diagram"
  @file.puts ""
  @file.puts "![alt text](images/erd_simple.png 'Simple ERD Diagram')"
  @file.puts "*Generated by [Rails ERD](https://voormedia.github.io/rails-erd/)"
  @file.puts ""
  @file.puts "> A more detailed diagram can be found [here](images/erd_complex.png)"
  @file.puts ""
  @file.puts "## Table Descriptions"
end

def generate_toc
  system "gen-toc docs/db_schema.md"
end

############################START OF SCRIPT#########################################
generate_images
@file = File.open('docs/db_schema.md', 'w')
generate_header
generate_tables
@file.close
generate_toc
# to_kramdown
############################END OF SCRIPT###########################################
